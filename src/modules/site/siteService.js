//siteService.js
const Site = require("./siteEntity");

// Configura√ß√£o padr√£o para o Site
const defaultSiteConfig = {
  primaryColor: '000000',
  secondColor: '123456', 
  textColor: 'FFFFFF'
};

// CREATE - Fun√ß√£o √∫nica para inicializa√ß√£o autom√°tica
const initializeSite = async function() {
  try {
    // Verifica se j√° existe
    const existingSite = await Site.findOne({});
    if (existingSite) {
      console.log('‚úÖ Site j√° inicializado');
      return existingSite;
    }
    
    // Cria o site padr√£o
    const site = new Site(defaultSiteConfig);
    const savedSite = await site.save();
    
    console.log('üé® Site inicializado com configura√ß√£o padr√£o');
    return savedSite;
  } catch (error) {
    // Se erro for de duplica√ß√£o, apenas retorna o existente
    if (error.code === 11000) {
      console.log('‚úÖ Site j√° existe, retornando existente');
      return await Site.findOne({});
    }
    throw new Error(`Erro ao inicializar site: ${error.message}`);
  }
};

// READ - Fun√ß√£o 1: Obter Site (uso geral)
const getSite = async function() {
  try {
    let site = await Site.findOne({});
    
    // Se n√£o existir, cria automaticamente
    if (!site) {
      site = await initializeSite();
    }
    
    return site;
  } catch (error) {
    throw new Error(`Erro ao obter configura√ß√£o do site: ${error.message}`);
  }
};

// UPDATE - Fun√ß√£o √∫nica para atualiza√ß√£o
const updateSite = async function(updateData) {
  try {
    let site = await Site.findOne({});
    
    // Se n√£o existir, cria primeiro
    if (!site) {
      site = await initializeSite();
    }
    
    // Atualiza os dados
    const updated = await Site.findOneAndUpdate(
      { _id: site._id },
      updateData,
      { new: true, runValidators: true }
    );
    
    return updated;
  } catch (error) {
    throw new Error(`Erro ao atualizar configura√ß√£o do site: ${error.message}`);
  }
};

module.exports = {
  initializeSite,
  getSite,
  updateSite
};